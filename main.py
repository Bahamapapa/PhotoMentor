import os
from fastapi import FastAPI, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
from openai import OpenAI
from dotenv import load_dotenv
from PIL import Image
import base64
from io import BytesIO

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

class FeedbackResponse(BaseModel):
    feedback: Optional[str] = None
    regions: Optional[list] = None

@app.post("/upload")
async def upload(file: UploadFile = File(...), user_level: str = Form(...), detailed: bool = Form(...)):
    print("==> –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∞—Ç–∞")

    contents = await file.read()
    image = Image.open(BytesIO(contents)).convert("RGB")
    image.thumbnail((768, 768))  # üîß –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ base64
    buffered = BytesIO()
    image.save(buffered, format="JPEG")
    img_str = base64.b64encode(buffered.getvalue()).decode("utf-8")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º image_part –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ prompt
    image_part = {
        "type": "image_url",
        "image_url": {
            "url": f"data:image/jpeg;base64,{img_str}"
        }
    }

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π prompt –±–µ–∑ base64
    prompt = f"""
–¢—ã ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫—Ä–∏—Ç–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏ –¥–æ 5 —É—á–∞—Å—Ç–∫–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ —É–ª—É—á—à–∏—Ç—å. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ —É–∫–∞–∂–∏:
- –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã `x`, `y`, `width`, `height` (–æ—Ç 0 –¥–æ 1, –¥–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
- –∫—Ä–∞—Ç–∫–∏–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ —Å—Ç–æ–∏—Ç —É–ª—É—á—à–∏—Ç—å

–ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:
1. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
2. –°–≤–µ—Ç –∏ —Ü–≤–µ—Ç
3. –ò—Å—Ç–æ—Ä–∏—è –∏–ª–∏ —ç–º–æ—Ü–∏—è
4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–î–æ–±–∞–≤—å **–æ—Ü–µ–Ω–∫—É –ø–æ –¥–µ—Å—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ** –≤ –≤–∏–¥–µ: **–û—Ü–µ–Ω–∫–∞: 8/10**

–ó–∞–≤–µ—Ä—à–∏ –∫—Ä–∞—Ç–∫–∏–º **—Å–æ–≤–µ—Ç–æ–º**, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: JSON. –ü—Ä–∏–º–µ—Ä:
```json
{{
  "full_text": "<–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –≤–∫–ª—é—á–∞—è –û—Ü–µ–Ω–∫–∞: 8/10 –∏ —Å–æ–≤–µ—Ç>",
  "regions": [
    {{
      "x": 0.25,
      "y": 0.3,
      "width": 0.15,
      "height": 0.2,
      "comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω–µ"
    }}
  ]
}}
```

–ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤–∫–ª—é—á—ë–Ω, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ `"full_text"`.

–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_level}
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {"–¥–∞" if detailed else "–Ω–µ—Ç"}
"""

    print("==> –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": [{"type": "text", "text": prompt}, image_part]}
            ],
            temperature=0.7
        )
    except Exception as e:
        print("==> –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:", e)
        return {"error": str(e)}

    content = response.choices[0].message.content
    print("==> –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
    print("==> –ö–æ–Ω—Ç–µ–Ω—Ç:", content)

    try:
        json_start = content.index("{")
        json_data = content[json_start:]
        feedback = eval(json_data)
    except Exception as e:
        feedback = {"full_text": content}
        print("==> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç")

    return {"feedback": feedback}